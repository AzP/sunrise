--- freenet/src/freenet/support/LibraryLoader.java	2008-02-26 18:01:40.000000000 +0100
+++ freenet/src/freenet/support/LibraryLoader.java.new	2008-02-26 20:39:02.000000000 +0100
@@ -18,50 +18,12 @@
  */
 public class LibraryLoader {
 	
-	public static String getSimplifiedArchitecture() {
-		String arch;
-		if(System.getProperty("os.arch").toLowerCase().matches("(i?[x0-9]86_64|amd64)")) {
-			arch = "amd64";
-		} else if(System.getProperty("os.arch").toLowerCase().matches("(ppc)")) {
-			arch = "ppc";
-		} else {
-			arch = "i386";
-		}
-		
-		return arch;
-	}
-	
 	public static void loadNative(String path, String libraryName) {
-		final boolean isWindows = File.pathSeparatorChar == '\\';
-		final String libraryNameWithPrefix = (isWindows ? "" : "lib") + libraryName;
-		final String libraryNameWithPrefixAndArch = libraryNameWithPrefix + '-' + getSimplifiedArchitecture();
-		final String libraryNameWithPrefixAndArchAndSuffix = libraryNameWithPrefixAndArch + (isWindows ? ".dll" : ".so");
-		String resourceName = path + libraryNameWithPrefixAndArchAndSuffix;
 		
 		try {
-			// Get the resource
-			URL resource = LibraryLoader.class.getResource(resourceName);
-			
-			// Get input stream from jar resource
-			InputStream inputStream = resource.openStream();
-
-			// Copy resource to filesystem in a temp folder with a unique name
-			File temporaryLib = File.createTempFile(libraryNameWithPrefixAndArch, ".tmp");
-			
-			// Delete on exit the dll
-			temporaryLib.deleteOnExit();
-			
-			FileOutputStream outputStream = new FileOutputStream(temporaryLib);
-			byte[] array = new byte[2048];
-			int read = 0;
-			while((read = inputStream.read(array)) > 0) {
-				outputStream.write(array, 0, read);
-			}
-			outputStream.close();
-
-			// Finally, load the dll
-			System.out.println("Attempting to load the "+libraryName+" library ["+resource+']');
-			System.load(temporaryLib.getPath());
+			File temporaryLib=new File("lib/lib"+libraryName+".so");
+			System.out.println("Attempting to load the NativeThread library ["+temporaryLib.getAbsolutePath()+']');
+			System.load(temporaryLib.getAbsolutePath());
 		} catch(Throwable e) {
 			e.printStackTrace();
 		}
