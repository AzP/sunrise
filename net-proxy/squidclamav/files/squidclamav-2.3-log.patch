diff -ur squidclamav~/config.c squidclamav/config.c
--- squidclamav~/config.c	2006-06-30 18:17:32.000000000 +0200
+++ squidclamav/config.c	2006-06-30 18:26:29.000000000 +0200
@@ -73,15 +73,15 @@
   
 
   if(fp == NULL) {
-    log(log_file, "unable to open configuration file\n");
+    log_SC(log_file, "unable to open configuration file\n");
     bridge_mode = 1;
     return;
   }
 
   if(alternate_config != NULL)
-    log(log_file, "Reading configuration from %s\n", alternate_config);
+    log_SC(log_file, "Reading configuration from %s\n", alternate_config);
   else
-    log(log_file, "Reading configuration from %s\n", CONFIG_FILE);
+    log_SC(log_file, "Reading configuration from %s\n", CONFIG_FILE);
   
   while(!bridge_mode && (fgets(buff, MAX_BUFF, fp) != NULL)) {
     
@@ -96,7 +96,7 @@
     }
   }
   if (redirect_url == NULL) {
-    log(log_file, "No redirection URL set, going to BRIDGE mode\n");
+    log_SC(log_file, "No redirection URL set, going to BRIDGE mode\n");
     bridge_mode = 1;
   }
   
@@ -127,7 +127,7 @@
   
   
   if((stored < 2) || (stored > 4)) {
-    log(log_file, 
+    log_SC(log_file, 
 	"unable to get a pair of patterns in add_to_patterns() "
 	"for [%s]\n", pattern);
     bridge_mode = 1;
@@ -208,7 +208,7 @@
   }
   
   if(regcomp(&compiled, first, regex_flags)) {
-    log(log_file, "Invalid regex [%s] in pattern file\n", first);
+    log_SC(log_file, "Invalid regex [%s] in pattern file\n", first);
     bridge_mode = 1;
     return;
   }
@@ -217,7 +217,7 @@
   
   rpattern.pattern = (char *)malloc(sizeof(char) * (strlen(first) +1));
   if(rpattern.pattern == NULL) {
-    log(log_file, "unable to allocate memory in add_to_patterns()\n");
+    log_SC(log_file, "unable to allocate memory in add_to_patterns()\n");
     bridge_mode = 1;
     return;
   }
@@ -225,7 +225,7 @@
 
   rpattern.replacement = (char *)malloc(sizeof(char) * (strlen(second) +1));
   if(rpattern.replacement == NULL) {
-    log(log_file, "unable to allocate memory in add_to_patterns()\n");
+    log_SC(log_file, "unable to allocate memory in add_to_patterns()\n");
     bridge_mode = 1;
     return;
   }
@@ -247,7 +247,7 @@
 			       rpattern.case_sensitive);
 
     if(rpattern.accel == NULL) {
-      log(log_file, "unable to allocate memory from get_accel()\n");
+      log_SC(log_file, "unable to allocate memory from get_accel()\n");
       bridge_mode = 1;
       return;
     }
diff -ur squidclamav~/lists.c squidclamav/lists.c
--- squidclamav~/lists.c	2006-06-30 18:17:32.000000000 +0200
+++ squidclamav/lists.c	2006-06-30 18:26:49.000000000 +0200
@@ -80,7 +80,7 @@
   
   new = (struct IP_item *)malloc(sizeof(struct IP_item));
   if(new == NULL) {
-    log(log_file, "unable to allocate memory in add_to_ip_list()\n");
+    log_SC(log_file, "unable to allocate memory in add_to_ip_list()\n");
     bridge_mode = 1;
     return 1;
   }
@@ -119,7 +119,7 @@
   
   new = (struct pattern_item *)malloc(sizeof(struct pattern_item));
   if(new == NULL) {
-    log(log_file, "unable to allocate memory in add_to_plist()\n");
+    log_SC(log_file, "unable to allocate memory in add_to_plist()\n");
     /* exit(3); */
     bridge_mode = 1;
     return;
diff -ur squidclamav~/log.c squidclamav/log.c
--- squidclamav~/log.c	2006-06-30 18:17:32.000000000 +0200
+++ squidclamav/log.c	2006-06-30 18:27:09.000000000 +0200
@@ -48,7 +48,7 @@
 
 extern int interactive;       /* from main.c */
 
-void log(char *filename, char *format, ...)
+void log_SC(char *filename, char *format, ...)
 {
   FILE *log;
   char *date_str = NULL;
diff -ur squidclamav~/log.h squidclamav/log.h
--- squidclamav~/log.h	2006-06-30 18:17:32.000000000 +0200
+++ squidclamav/log.h	2006-06-30 18:27:24.000000000 +0200
@@ -41,9 +41,9 @@
 
 
 #ifdef __GNUC__
-void log(char *, char *, ...) __attribute__ ((format (printf, 2, 3)));
+void log_SC(char *, char *, ...) __attribute__ ((format (printf, 2, 3)));
 #else
-void log(char *, char *, ...);
+void log_SC(char *, char *, ...);
 #endif
 char *get_date(void);
 
diff -ur squidclamav~/main.c squidclamav/main.c
--- squidclamav~/main.c	2006-06-30 18:17:32.000000000 +0200
+++ squidclamav/main.c	2006-06-30 18:28:04.000000000 +0200
@@ -99,7 +99,7 @@
 void
 sigalarm (int sig)
 {
-  log (log_file, "Timeout waiting for clamd response\n");
+  log_SC (log_file, "Timeout waiting for clamd response\n");
   exit (3);
 }
 
@@ -111,20 +111,20 @@
   int msize = data_size * nmemb;
 
   if (debug)
-    log (log_file, "Scanning data received against clamd stream\n");
+    log_SC (log_file, "Scanning data received against clamd stream\n");
   if (debug)
-    log (log_file, "Sending data to clamd\n");
+    log_SC (log_file, "Sending data to clamd\n");
   ret = write (wsockd, ptr, msize);
   if (ret <= 0)
     {
 	    if (debug)
-	      log (log_file, "Can't write to clamd socket.\n");
+	      log_SC (log_file, "Can't write to clamd socket.\n");
 	    close (wsockd);
     }
   else
     {
       if (debug)
-	log (log_file, "Write %d bytes on %d to socket\n", ret, msize);
+	log_SC (log_file, "Write %d bytes on %d to socket\n", ret, msize);
     }
 
   return msize;
@@ -216,13 +216,13 @@
   signal (SIGTERM, sigterm);
 
   if (bridge_mode)
-    log (log_file, "Invalid condition - continuing in BRIDGE mode\n");
+    log_SC (log_file, "Invalid condition - continuing in BRIDGE mode\n");
 
-  log (log_file, "SquidClamav (PID %d) started\n", (int) getpid ());
+  log_SC (log_file, "SquidClamav (PID %d) started\n", (int) getpid ());
 
   if (bridge_mode)
     {
-      log (log_file, "Invalid condition - continuing in BRIDGE mode\n");
+      log_SC (log_file, "Invalid condition - continuing in BRIDGE mode\n");
     }
   else
     {
@@ -232,10 +232,10 @@
       /* get an easy handle */
       if ((eh = curl_easy_init ()) == NULL)
 	{
-	  log (log_file, "Curl easy initialization failed\n");
+	  log_SC (log_file, "Curl easy initialization failed\n");
 	  curl_global_cleanup ();
 	  bridge_mode = 1;
-	  log (log_file, "Invalid condition - continuing in BRIDGE mode\n");
+	  log_SC (log_file, "Invalid condition - continuing in BRIDGE mode\n");
 	}
       else
 	{
@@ -298,7 +298,7 @@
 	{
 
 	  if (debug)
-	    log (log_file, "No antivir check for url:%s\n", in_buff.url);
+	    log_SC (log_file, "No antivir check for url:%s\n", in_buff.url);
 
 	  /* no replacement for the URL was found */
 	  fprintf (stdout, "\n");
@@ -320,11 +320,11 @@
 	    {
 	        if (force == 0) {
 		      /* no header so just go back to squid */
-	              log (log_file, "No header from url %s\n", in_buff.url);
+	              log_SC (log_file, "No header from url %s\n", in_buff.url);
 		      fprintf (stdout, "\n");
 		      continue;
 		} else {
-	              log (log_file, "Force scanning ... No header from url %s\n", in_buff.url);
+	              log_SC (log_file, "Force scanning ... No header from url %s\n", in_buff.url);
 		    force_scan = 1;
 		}
 	    }
@@ -334,12 +334,12 @@
 	      != CURLE_OK)
 	    {
 		      /* not ok --> squid should handle this */
-		      log (log_file, "No content length from url %s\n", in_buff.url);
+		      log_SC (log_file, "No content length from url %s\n", in_buff.url);
 		      fprintf (stdout, "\n");
 		      continue;
 	    }
 	  if (debug)
-	    log (log_file, "File size is %'.2f\n", usize);
+	    log_SC (log_file, "File size is %'.2f\n", usize);
 
 	  /* get the CONTENT_TYPE out of the header */
 	  if (check_content_type == 1)
@@ -348,18 +348,18 @@
 		  CURLE_OK)
 		{
 		  /* not ok --> squid should handle this */
-		  log (log_file, "No content type from url %s\n",
+		  log_SC (log_file, "No content type from url %s\n",
 		       in_buff.url);
 		  fprintf (stdout, "\n");
 		  continue;
 	      }
 	      if (debug)
-		log (log_file, "Content type is %s\n", p);
+		log_SC (log_file, "Content type is %s\n", p);
 	      if ((p == NULL) || (pattern_compare (p) == 0))
 		{
 
 		  if (debug)
-		    log (log_file, "No antivir check for content-type: %s\n",
+		    log_SC (log_file, "No antivir check for content-type: %s\n",
 			 p);
 		  /* no replacement for the URL was found */
 		  fprintf (stdout, "\n");
@@ -372,16 +372,16 @@
 	  /***** Open a socket to Clamd daemon *****/
 	  if ((sockd = dconnect ()) < 0)
 	    {
-	      log (log_file, "Can't connect to Clamd daemon\n");
+	      log_SC (log_file, "Can't connect to Clamd daemon\n");
 	      fprintf (stdout, "\n");
 	      return -1;
 	    }
 	  if (debug)
-	    log (log_file, "Sending STREAM to clamd.\n");
+	    log_SC (log_file, "Sending STREAM to clamd.\n");
 
 	  if (write (sockd, "STREAM", 6) <= 0)
 	    {
-	      log (log_file, "Can't write to Clamd socket.\n");
+	      log_SC (log_file, "Can't write to Clamd socket.\n");
 	      fprintf (stdout, "\n");
 	      return -1;
 	    }
@@ -400,17 +400,17 @@
 	    }
 	  if (!loopw)
 	    {
-	      log (log_file, "Clamd daemon not ready for stream scanning.\n");
+	      log_SC (log_file, "Clamd daemon not ready for stream scanning.\n");
 	      fprintf (stdout, "\n");
 	      return -1;
 	    }
 	  if (debug)
-	    log (log_file, "Received port %d from clamd.\n", port);
+	    log_SC (log_file, "Received port %d from clamd.\n", port);
 
 	  /* connect to clamd given port */
 	  if ((wsockd = socket (AF_INET, SOCK_STREAM, 0)) < 0)
 	    {
-	      log (log_file, "Can't create the Clamd socket.\n");
+	      log_SC (log_file, "Can't create the Clamd socket.\n");
 	      fprintf (stdout, "\n");
 	      return -1;
 	    }
@@ -421,7 +421,7 @@
 	  peer_size = sizeof (peer);
 	  if (getpeername (sockd, (struct sockaddr *) &peer, &peer_size) < 0)
 	    {
-	      log (log_file, "Can't get socket peer name.\n");
+	      log_SC (log_file, "Can't get socket peer name.\n");
 	      fprintf (stdout, "\n");
 	      return -1;
 	    }
@@ -434,20 +434,20 @@
 	      server.sin_addr.s_addr = peer.sin_addr.s_addr;
 	      break;
 	    default:
-	      log (log_file, "Unexpected socket type: %d.\n",
+	      log_SC (log_file, "Unexpected socket type: %d.\n",
 		   peer.sin_family);
 	      return -1;
 	    }
 
 	  if (debug)
-	    log (log_file, "Trying to connect to clamd [port: %d].\n", port);
+	    log_SC (log_file, "Trying to connect to clamd [port: %d].\n", port);
 
 	  if (connect
 	      (wsockd, (struct sockaddr *) &server,
 	       sizeof (struct sockaddr_in)) < 0)
 	    {
 	      close (wsockd);
-	      log (log_file, "Can't connect to clamd [port: %d].\n", port);
+	      log_SC (log_file, "Can't connect to clamd [port: %d].\n", port);
 	      fprintf (stdout, "\n");
 	      return -1;
 	    }
@@ -463,26 +463,26 @@
 	  curl_easy_setopt (eh, CURLOPT_HTTPGET, TRUE);
 	  if (curl_easy_perform (eh) != 0)
 	    {
-	      log (log_file, "Error when downloading url %s\n", in_buff.url);
-	      log (log_file, "CURLOPT_ERRORBUFFER: %s\n", err);
+	      log_SC (log_file, "Error when downloading url %s\n", in_buff.url);
+	      log_SC (log_file, "CURLOPT_ERRORBUFFER: %s\n", err);
 	      fprintf (stdout, "\n");
 	      continue;
 	    }
 
 	  close (wsockd);
 	  if (debug)
-	    log (log_file, "Connection to clamd on port: %d closed.\n", port);
+	    log_SC (log_file, "Connection to clamd on port: %d closed.\n", port);
 	  if (debug)
-	    log (log_file, "Reading clamd scan result.\n");
+	    log_SC (log_file, "Reading clamd scan result.\n");
 	  while ((nbread = read (sockd, cbuff, sizeof (cbuff))) > 0)
 	    {
 	      if (debug)
-		log (log_file, "received: %s", cbuff);
+		log_SC (log_file, "received: %s", cbuff);
 	      if (strstr (cbuff, "FOUND\n"))
 		{
 		  sprintf (urlredir, "%s?url=%s&source=%s&user=%s&virus=%s",
 			redirect_url,in_buff.url,in_buff.src_address,in_buff.ident,cbuff);
-		  log (log_file, "Redirecting URL to: %s\n", urlredir);
+		  log_SC (log_file, "Redirecting URL to: %s\n", urlredir);
 		  replace (urlredir, " ", "+");
 		  strcpy (in_buff.url, urlredir);
 		}
@@ -490,19 +490,19 @@
 	    }
 	  close (sockd);
 	  if (debug)
-	    log (log_file, "End reading clamd scan result.\n");
+	    log_SC (log_file, "End reading clamd scan result.\n");
 
 	  if (strlen (urlredir) > 0)
 	    {
 	      if (debug)
-		log (log_file, "Virus found send redirection to Squid.\n");
+		log_SC (log_file, "Virus found send redirection to Squid.\n");
 	      fprintf (stdout, "%s %s %s %s\n", in_buff.url,
 		       in_buff.src_address, in_buff.ident, in_buff.method);
 	    }
 	  else
 	    {
 	      if (debug)
-		log (log_file, "No virus detected for URL: %s.\n",
+		log_SC (log_file, "No virus detected for URL: %s.\n",
 		     in_buff.url);
 	      fprintf (stdout, "\n");
 	    }
@@ -526,7 +526,7 @@
 sighup ()
 {
   signal (SIGHUP, sighup);	/* reset signal */
-  log (log_file, "Sighup received, reloading virus database...\n");
+  log_SC (log_file, "Sighup received, reloading virus database...\n");
   /* simply terminate the program, squid should reload it */
   /* cleanup */
   curl_global_cleanup ();
@@ -541,7 +541,7 @@
 sigterm ()
 {
   signal (SIGTERM, sigterm);	/* reset signal */
-  log (log_file, "Sigterm received, cleaning all before quit...\n");
+  log_SC (log_file, "Sigterm received, cleaning all before quit...\n");
   /* cleanup */
   curl_global_cleanup ();
   free (redirect_url);
@@ -569,7 +569,7 @@
       strncpy (userver.sun_path, clamd_local, sizeof(userver.sun_path));
       if ((asockd = socket (AF_UNIX, SOCK_STREAM, 0)) < 0)
 	{
-	  log (log_file, "Can't bind local socket on %s.\n", clamd_local);
+	  log_SC (log_file, "Can't bind local socket on %s.\n", clamd_local);
 	  return -1;
 	}
       if (connect
@@ -577,7 +577,7 @@
 	   sizeof (struct sockaddr_un)) < 0)
 	{
 	  close (asockd);
-	  log (log_file, "Can't connect to clamd on local socket %s.\n", clamd_local);
+	  log_SC (log_file, "Can't connect to clamd on local socket %s.\n", clamd_local);
 	  return -1;
 	}
 
@@ -588,7 +588,7 @@
 
       if ((asockd = socket (AF_INET, SOCK_STREAM, 0)) < 0)
 	{
-	  log (log_file, "Can't create the socket.\n");
+	  log_SC (log_file, "Can't create the socket.\n");
 	  return -1;
 	}
 
@@ -598,7 +598,7 @@
       if ((he = gethostbyname (clamd_ip)) == 0)
 	{
 	  close (asockd);
-	  log (log_file, "Can't lookup clamd hostname.\n");
+	  log_SC (log_file, "Can't lookup clamd hostname.\n");
 	  return -1;
 	}
       server.sin_addr = *(struct in_addr *) he->h_addr_list[0];
@@ -608,7 +608,7 @@
 	   sizeof (struct sockaddr_in)) < 0)
 	{
 	  close (asockd);
-	  log (log_file, "Can't connect to clamd.\n");
+	  log_SC (log_file, "Can't connect to clamd.\n");
 	  return -1;
 	}
     }
diff -ur squidclamav~/squidclamav.c squidclamav/squidclamav.c
--- squidclamav~/squidclamav.c	2006-06-30 18:17:32.000000000 +0200
+++ squidclamav/squidclamav.c	2006-06-30 18:29:02.000000000 +0200
@@ -81,16 +81,16 @@
   
   
   if(converted != 4) {
-    log(log_file, "%d = incorrect number of scanned fields\n", converted);
+    log_SC(log_file, "%d = incorrect number of scanned fields\n", converted);
     return 1;
   }
   
   if (debug)
-	log(log_file, "Request:%s %s %s %s\n", in_buff->url, in_buff->src_address, in_buff->ident, in_buff->method);
+	log_SC(log_file, "Request:%s %s %s %s\n", in_buff->url, in_buff->src_address, in_buff->ident, in_buff->method);
 
   /* check the source IP address */
   if(strcmp(in_buff->src_address, "") == 0) {
-    log(log_file, "in_buff.src_address is NULL in main()\n");
+    log_SC(log_file, "in_buff.src_address is NULL in main()\n");
     return 1;
   }
 
@@ -99,21 +99,21 @@
   if((strcmp(in_buff->method, "") == 0) || 
      (strcmp(in_buff->method, "GET"))) {
     if (debug)
-       log(log_file, "in_buff.method not \"GET\"\n");
+       log_SC(log_file, "in_buff.method not \"GET\"\n");
     return 1;
   }
 
   /* handle the error condition in which 4 arguments not parsed,
      in which we just print buff to stdout */
   if(strlen(in_buff->url) <= 4) {
-    log(log_file, "strlen in_buff->url = [%d] in main()\n", 
+    log_SC(log_file, "strlen in_buff->url = [%d] in main()\n", 
 	strlen(in_buff->url));
     return 1;
   }
 
   /* check that the IP source address supplied is valid */
   if(get_ip(in_buff->src_address,&address)) {
-    log(log_file, "in_buff.src_address not valid\n");
+    log_SC(log_file, "in_buff.src_address not valid\n");
     return 1;
   } 
   
@@ -141,11 +141,11 @@
 	    free(new_string);
 	    if(curr->patterns.type == ABORT) {
 	        if (debug)
-		    log(log_file, "abort matched: %s\n", url);
+		    log_SC(log_file, "abort matched: %s\n", url);
 		return -1;
 	    } else {
 	        if (debug)
-		    log(log_file, "regex matched: %s\n", url);
+		    log_SC(log_file, "regex matched: %s\n", url);
 		return 1;
 	    }
         }
