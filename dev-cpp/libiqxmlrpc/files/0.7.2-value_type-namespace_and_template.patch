diff -Naur libiqxmlrpc-0.7.2/libiqxmlrpc/value_type.cc libiqxmlrpc-0.7.2.new/libiqxmlrpc/value_type.cc
--- libiqxmlrpc-0.7.2/libiqxmlrpc/value_type.cc	2005-06-06 19:03:01.000000000 +0200
+++ libiqxmlrpc-0.7.2.new/libiqxmlrpc/value_type.cc	2006-06-25 21:17:35.000000000 +0200
@@ -24,7 +24,7 @@
 #include "utf_conv.h"
 #include "util.h"
 
-using namespace iqxmlrpc;
+namespace iqxmlrpc {
 
 
 Value_type* Nil::clone() const
@@ -40,6 +40,7 @@
 
 
 // --------------------- Scalar's specialization ------------------------------
+template<>
 void Int::to_xml( xmlpp::Node* p ) const 
 {
   xmlpp::Element* el = p->add_child( "i4" );
@@ -49,14 +50,14 @@
   el->add_child_text( ss.str() );
 }
 
-
+template<>
 void Bool::to_xml( xmlpp::Node* p ) const
 {
   xmlpp::Element* el = p->add_child( "boolean" );
   el->add_child_text( value_ ? "1" : "0" );
 }
 
-
+template<>
 void Double::to_xml( xmlpp::Node* p ) const
 {
   xmlpp::Element* el = p->add_child( "double" );
@@ -68,7 +69,8 @@
 
 
 // --------------------------------------------------------------------------
-void iqxmlrpc::String::to_xml( xmlpp::Node* p ) const
+template<>
+void String::to_xml( xmlpp::Node* p ) const
 {
   xmlpp::Element* el = p->add_child( "string" );
   el->add_child_text( config::cs_conv->to_utf(value_) );
@@ -532,3 +534,5 @@
   
   return cache;
 }
+
+} // namespace iqxmlrpc
